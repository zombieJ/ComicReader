<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="650" height="350"
		 initialize="setup(event)"
		 mouseWheel="mouseWheel(event)"
		 resize="updateView(event)">

	<fx:Script>
		<![CDATA[
			import com.coltware.airxzip.ZipEntry;
			import com.coltware.airxzip.ZipFileReader;
			
			import comic.Page;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.graphics.codec.JPEGEncoder;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.Window;
			import spark.events.IndexChangeEvent;
			
			protected var file:File = new File();
			protected var reader:ZipFileReader;
			protected var loader:Loader = new Loader();
			protected var currentImage:BitmapData;
			protected var startPoint:Point;
			
			//================================================
			public function get imgWidth():int {
				try{
					return loader.contentLoaderInfo.width;
				} catch(error:Error) {
				}
				return 1;
			}
			public function get imgHeight():int {
				try{
					return loader.contentLoaderInfo.height;
				} catch(error:Error) {
				}
				return 1;
			}
			//================================================
			protected const APP_NAME:String = "ComicReader";
			protected function saveFilePath(path:String):void {
				var so:SharedObject = SharedObject.getLocal(APP_NAME);
				so.data.filepath = path;
				so.flush();
				so.close();

				savePage(0);
			}
			protected function savePage(index:int):void {
				var so:SharedObject = SharedObject.getLocal(APP_NAME);
				so.data.page = index;
				so.flush();
				so.close();
			}
			protected function getSavedPathFile():File {
				var so:SharedObject = SharedObject.getLocal(APP_NAME);
				try {
					var filepath:String = so.data.filepath;
					var file:File = new File(filepath);
					if(file.exists) return file;
				} catch(error:Error) {
				} finally {
					so.close();
				}
				return null;
			}
			protected function getSavedPage():int {
				var so:SharedObject = SharedObject.getLocal(APP_NAME);
				try {
					var page:int = so.data.page;
					return page != -1 ? page : 0;
				} catch(error:Error) {
				} finally {
					so.close();
				}
				return 0;
			}
			//================================================
			
			protected function setup(event:FlexEvent):void {
				// Get image size
				loader.contentLoaderInfo.addEventListener(Event.INIT, function(e:Event):void {
					var b:BitmapData = new BitmapData(imgWidth, imgHeight);
					b.draw(loader);
					loadImage(b);
				});

				// Load File if exists
				file = getSavedPathFile();
				if(file != null)
					fileSelectpd();
				else
					file = new File();
			}
			
			// Load File
			protected function openFile(event:MouseEvent = null):void {
				var cbzFilter:FileFilter = new FileFilter("Comic File", "*.cbz");
				file.browseForOpen("Open Comic", [cbzFilter]);
				file.addEventListener(Event.SELECT, fileSelectpd);
			}
			
			protected function fileSelectpd(e:Event = null):void {
				if(e != null) saveFilePath(file.nativePath);

				reader = new ZipFileReader();
				reader.open(file);
				var entry:ZipEntry;
				var list:ArrayCollection = filterEntries(reader.getEntries());
				lst_images.dataProvider = list;
				lst_images.selectedIndex = getSavedPage();
				
				var page:Page = Page(list.getItemAt(getSavedPage()));
				loadPage(page);
			}
			
			public function filterEntries(list:Array):ArrayCollection {
				var ret:ArrayCollection = new ArrayCollection();
				for each(var entry:ZipEntry in list) {
					if(entry.getFilename().indexOf("__") != 0 && !entry.isDirectory()) {
						ret.addItem(new Page(entry));
					}
				}
				var sort:Sort = new Sort();
				sort.fields=[new SortField("filename")];
				ret.sort = sort;
				ret.refresh();
				return ret;
			}
			
			// Update Image
			protected function pageChanged(event:IndexChangeEvent = null):void {
				var page:Page = lst_images.selectedItem;
				loadPage(page);
			}
			
			protected function loadPage(page:Page):void {
				var data:ByteArray = reader.unzip(page.entry);
				loader.loadBytes(data);
				lbl_title.text = page.filename;
			}
			
			protected function loadImage(data:BitmapData):void {
				currentImage = data;
				startPoint = new Point();
				updateView();
			}

			// User Select Page
			public function prevPage(e:Event):void {
				var ind:int = lst_images.selectedIndex - 1;
				updatePageByIndex(ind);
			}
			public function nextPage(e:Event):void {
				var ind:int = lst_images.selectedIndex + 1;
				updatePageByIndex(ind);
			}
			public function refreshPage(e:Event):void {
				var ind:int = lst_images.selectedIndex;
				updatePageByIndex(ind);
			}
			protected function updatePageByIndex(ind:int):void {
				if(lst_images.dataProvider == null) return;

				var length:int = lst_images.dataProvider.length;
				ind = (ind + length) % length;
				lst_images.selectedIndex = ind;
				savePage(lst_images.selectedIndex);
				pageChanged();
			}
			
			// User move image position
			private var prePos:Point;
			private var preMosPos:Point;
			protected function grp_img_mouseDown(e:MouseEvent):void {
				prePos = new Point(startPoint.x, startPoint.y);
				preMosPos = new Point(e.stageX, e.stageY);
			}
			
			protected function grp_img_mouseMove(e:MouseEvent):void {
				if(preMosPos == null) return;
				startPoint.x = prePos.x + e.stageX - preMosPos.x;
				startPoint.y = prePos.y + e.stageY - preMosPos.y;
				updateView();
			}
			
			protected function grp_img_mouseUp(e:MouseEvent):void {
				preMosPos = null;
			}

			// User update scale
			public function get imgScale():Number {
				return sld_scale.value / 100;
			}

			protected function mouseWheel(event:MouseEvent):void {
				var value:Number = sld_scale.value;
				if(event.delta > 0)
					sld_scale.value = Math.min(sld_scale.maximum, value + sld_scale.stepSize);
				else
					sld_scale.value = Math.max(sld_scale.minimum, value - sld_scale.stepSize);
				updateView();
			}

			protected function updateView(event:Event = null):void {
				var size:Number = sld_scale.value;

				lbl_scale.text = "Scale: " + size + "%";
				var bm:BitmapData = new BitmapData(this.width, this.height, true, 0x000000);
				var matrix:Matrix = new Matrix();
				matrix.scale(imgScale, imgScale);
				matrix.translate(startPoint.x, startPoint.y);
				bm.draw(currentImage, matrix);
				img_loader.source = bm;
			}

			// Controller
			[Bindable]
			protected var showControl:Boolean = false;
			protected function optionWindow(event:MouseEvent):void {
				showControl = !showControl;
			}
		]]>
	</fx:Script>

	<!-- Image Container -->
	<s:Group id="grp_img" y="0" width="100%" height="100%" clipAndEnableScrolling="true"
			 mouseDown="grp_img_mouseDown(event)" mouseMove="grp_img_mouseMove(event)"
			 mouseUp="grp_img_mouseUp(event)">
		<s:Image id="img_loader" width="100%" height="100%" fillMode="clip" smooth="true"
				 smoothingQuality="high"/>
	</s:Group>
	<!-- Controller Container -->
	<s:Group id="grp_control" right="10" top="30" bottom="10" width="200" visible="{showControl}">
		<s:List id="lst_images" top="19" bottom="0" width="100%"
				change="pageChanged(event)" labelField="filename"></s:List>
		<s:HSlider id="sld_scale" width="100%" change="updateView(event)"
				   maximum="300"  minimum="10" stepSize="10" value="100"/>
	</s:Group>
	<s:HGroup id="grp_pageNav" bottom="10" height="30" fontSize="24" gap="10" horizontalCenter="0">
		<s:Button height="100%" label="&lt;&lt;" click="prevPage(event)" color="#FFFFFF"
				  skinClass="skin.CloseButton"/>
		<s:Button height="100%" label="+" click="refreshPage(event)" color="#FFFFFF"
				  skinClass="skin.CloseButton"/>
		<s:Button height="100%" label="&gt;&gt;" click="nextPage(event)" color="#FFFFFF"
				  skinClass="skin.CloseButton"/>
	</s:HGroup>

	<s:Label id="lbl_title" width="100%" height="24" backgroundAlpha="0.5" backgroundColor="#000000"
			 color="#FFFFFF" paddingLeft="5" paddingRight="5" paddingTop="2" text="Comic Reader"
			 verticalAlign="middle"/>
	<s:Label id="lbl_scale" right="188" top="8" color="#FFFFFF" />
	<s:Button right="2" top="2" height="20" label="Option" click="optionWindow(event)"
			  color="#FFFFFF" skinClass="skin.CloseButton"/>
	<s:Button right="67" top="2" height="20" label="Open Comic File" click="openFile(event)"
			  color="#FFFFFF" skinClass="skin.CloseButton"/>
</s:Group>
